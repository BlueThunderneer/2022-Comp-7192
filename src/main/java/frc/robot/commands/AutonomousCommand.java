


package frc.robot.commands;
import edu.wpi.first.wpilibj2.command.CommandBase;
import frc.robot.subsystems.Drivetrain;


// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class AutonomousCommand extends CommandBase {
    
//<<<<<<< HEAD
    
//=======

//>>>>>>> aca9d164eff968804e3aff81d61dfa119090505e
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

    public AutonomousCommand(Drivetrain m_drivetrain) {
       
//<<<<<<< HEAD
       
        new DriveTime(-0.75, 0.0, 5.0, m_drivetrain);                                        
        
//=======
        new DriveTime(0.75, 0.0, 5.0, m_drivetrain); //Drive using these params (speed,Rotation,Time,Subsystem used)
       // m_drivetrain = subsystem;       // not certain about the constructor in () above.... or these two lines of code
       // addRequirements(m_drivetrain);  //but thiking these might not be necessary.... but im also worried about access to 
                                        // the drivetrain subsystem otherwise ..
                                               

//>>>>>>> aca9d164eff968804e3aff81d61dfa119090505e
        
        
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

        // m_subsystem = subsystem;
        // addRequirements(m_subsystem);    

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        
    }

    // Called when the command is initially scheduled.
    @Override
    public void initialize() {
        /*
        m_drivetrain.arcadeDrive(0.25, 0.0, true);  ///should initiate motors at 25% power
        sleep(2000);
        m_drivetrain.arcadeDrive(0, 0, true);   /// then wait two seconds,  then turn motors off
        */
    }

    // Called every time the scheduler runs while the command is scheduled.
    @Override
    public void execute() {
    }

    // Called once the command ends or is interrupted.
    @Override
    public void end(boolean interrupted) {
    }

    // Returns true when the command should end.
    @Override
    public boolean isFinished() {
        return false;
    }

    @Override
    public boolean runsWhenDisabled() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DISABLED
        return false;

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DISABLED
    }
}
